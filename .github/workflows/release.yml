name: 🍰 Release

on:
    workflow_dispatch:
        inputs:
            release_version:
                description: Release version
                required: true

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

permissions:
    contents: read

jobs:
    prepare:
        runs-on: ubuntu-latest

        outputs:
            release_type: ${{ steps.release-type.outputs.value }}

        steps:
            - name: Validate release version
              run: |
                  if [[ ! ${{ github.event.inputs.release_version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+(-(rc|beta|alpha)\.[0-9]+)?$ ]]; then
                      echo "Invalid release version: ${{ github.event.inputs.release_version }}"
                      exit 1
                  fi

            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: ./.github/actions/setup-node

            - name: 🔏 Set all monorepo's package version
              run: |
                  node -e "const fs = require('fs'); const package = JSON.parse(fs.readFileSync('./package.json')); package.version = '${{ github.event.inputs.release_version }}'; fs.writeFileSync('./package.json', JSON.stringify(package, null, 4) + '\n');"
                  for package in $(ls packages); do
                      node -e "const fs = require('fs'); const package = JSON.parse(fs.readFileSync('./packages/$package/package.json')); package.version = '${{ github.event.inputs.release_version }}'; fs.writeFileSync('./packages/$package/package.json', JSON.stringify(package, null, 4) + '\n');"
                  done

            - name: 📝 Commit and push changes
              run: |
                  git config --global user.email "actions@github.com"
                  git config --global user.name "GitHub Actions"
                  git add -A
                  git commit -m "chore(release): v${{ github.event.inputs.release_version }}" || exit 0
                  git push
                  git tag -a v${{ github.event.inputs.release_version }} -m "v${{ github.event.inputs.release_version }}"
                  git push origin v${{ github.event.inputs.release_version }}

            - name: 🚚 Get release type
              id: release-type
              run: |
                  if [[ ${{ github.event.inputs.release_version }} =~ -alpha\. ]]; then
                      extracted_type="${BASH_REMATCH[1]}"
                      echo "value=$extracted_type" >> $GITHUB_OUTPUT
                  fi

    release-npm:
        needs: [prepare]
        if: github.repository == 'dream-num/univer'
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18
                  registry-url: https://registry.npmjs.org

            - name: 🚚 Install dependencies and build
              run: |
                  pnpm install
                  pnpm run build

            - name: 🐙 Publish (alpha)
              if: ${{ needs.prepare.outputs.release_type == 'alpha' }}
              run: pnpm publish --access public --tag ${{ needs.prepare.outputs.release_type }} -r
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

            - name: 🐙 Publish (beta, rc, stable)
              if: ${{ needs.prepare.outputs.release_type != 'alpha' }}
              run: pnpm publish --access public -r
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

    release-verdaccio:
        needs: [prepare]
        if: github.repository == 'dream-num/univer'
        runs-on: ubuntu-latest

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Install Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 18
                  registry-url: ${{ secrets.VERDACCIO_URL }}
                  scope: '@univerjs'

            - name: 🚚 Install dependencies
              run: |
                  pnpm install
                  pnpm run build

            - name: 🐙 Publish (alpha)
              if: ${{ needs.prepare.outputs.release_type == 'alpha' }}
              run: pnpm publish --access public --tag ${{ needs.prepare.outputs.release_type }} -r
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.VERDACCIO_TOKEN }}

            - name: 🐙 Publish (beta, rc)
              if: ${{ needs.prepare.outputs.release_type == 'beta' || needs.prepare.outputs.release_type == 'rc' }}
              run: pnpm publish --access public -r
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.VERDACCIO_TOKEN }}

    build-demo:
        runs-on: ubuntu-latest
        needs: [release-npm]

        outputs:
            preview-url: ${{ steps.vercel-demo.outputs.preview-url }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: ./.github/actions/setup-node

            #  ================= Deploy Demo =================
            - name: 📦 Build demo
              run: pnpm run build:demo

            - name: Copy demo to workspace
              run: |
                  mkdir .workspace
                  cp -r ./examples/local/* .workspace

            - name: 🚀 Deploy to Vercel (demo)
              uses: amondnet/vercel-action@v25
              id: vercel-demo
              with:
                  vercel-token: ${{ secrets.VERCEL_TOKEN }}
                  vercel-org-id: ${{ secrets.ORG_ID}}
                  vercel-project-id: ${{ secrets.PROJECT_ID}}

    build-storybook:
        runs-on: ubuntu-latest
        needs: [release-npm]

        outputs:
            preview-url: ${{ steps.vercel-storybook.outputs.preview-url }}

        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Node.js
              uses: ./.github/actions/setup-node

            # ================= Deploy Storybook =================
            - name: 📦 Build storybook
              run: pnpm run build:storybook

            - name: 🚀 Deploy to Vercel (storybook)
              uses: amondnet/vercel-action@v25
              id: vercel-storybook
              with:
                  vercel-token: ${{ secrets.VERCEL_TOKEN }}
                  vercel-org-id: ${{ secrets.ORG_ID}}
                  vercel-project-id: ${{ secrets.PROJECT_ID_STORYBOOK}}
                  vercel-args: --prod

    notify:
        needs: [prepare, release-npm, release-verdaccio, build-demo, build-storybook]
        runs-on: ubuntu-latest

        steps:
            - name: Invoke deployment hook
              uses: distributhor/workflow-webhook@v3
              with:
                  webhook_url: ${{ secrets.WEBHOOK_URL }}
                  data: >
                      {
                          "type": "release",
                          "version": "${{ github.ref_name }}",
                          "workflow": {
                              "id": "${{ github.run_id }}"
                          },
                          "preview": {
                              "📑 Examples": "${{ needs.build-demo.outputs.preview-url }}/",
                              "📚 Storybook": "${{ needs.build-storybook.outputs.preview-url }}/"
                          }
                      }
