name: 🥷 Release Nightly

on:
    schedule:
        - cron: '0 16 * * *'

permissions:
    contents: read

jobs:
    release-nightly:
        if: github.repository == 'dream-num/univer'
        runs-on: ubuntu-latest

        outputs:
            version: ${{ steps.nightly-version.outputs.version }}

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 18
                  registry-url: ${{ secrets.VERDACCIO_URL }}

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-

            - name: 📌 Get package version (version + date)
              id: nightly-version
              run: |
                  original_version=$(node -p "require('./package.json').version")
                  version_number=$(echo "$original_version" | sed -E 's/^([0-9]+\.[0-9]+\.[0-9]+).*$/\1/')
                  echo "version=$version_number-nightly.$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT

            # - name: Create tag
            #   uses: actions/github-script@v5
            #   with:
            #       github-token: ${{ secrets.GITHUB_TOKEN }}
            #       script: |
            #           github.rest.git.createRef({
            #             owner: context.repo.owner,
            #             repo: context.repo.repo,
            #             ref: 'refs/tags/${{ steps.nightly-version.outputs.version }}',
            #             sha: context.sha
            #           })

            - name: 🔏 Set all monorepo's package version
              run: |
                  for package in $(ls packages); do
                      node -e "const fs = require('fs'); const package = JSON.parse(fs.readFileSync('./packages/$package/package.json')); package.version = '${{ steps.nightly-version.outputs.version }}'; fs.writeFileSync('./packages/$package/package.json', JSON.stringify(package, null, 4));"
                  done

            - name: 🚚 Install dependencies
              run: pnpm install

            - name: 📦 Build
              run: pnpm run build

            - name: 🐙 Publish
              run: pnpm publish --access public --tag nightly -r
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.VERDACCIO_TOKEN }}

    build-demo:
        runs-on: ubuntu-latest
        needs: [release-nightly]

        outputs:
            preview-url: ${{ steps.vercel-demo.outputs.preview-url }}

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-

            - name: Install dependencies
              run: pnpm install

            #  ================= Deploy Demo =================
            - name: 📦 Build demo
              run: pnpm run build:demo

            - name: Copy demo to workspace
              run: |
                  mkdir .workspace
                  cp -r ./examples/docs/local .workspace/docs
                  cp -r ./examples/sheets/local .workspace/sheets
                  cp -r ./examples/slides/local .workspace/slides

            - name: 🚀 Deploy to Vercel (demo)
              uses: amondnet/vercel-action@v25
              id: vercel-demo
              with:
                  vercel-token: ${{ secrets.VERCEL_TOKEN }}
                  vercel-org-id: ${{ secrets.ORG_ID}}
                  vercel-project-id: ${{ secrets.PROJECT_ID}}

    build-storybook:
        runs-on: ubuntu-latest
        needs: [release-nightly]

        outputs:
            preview-url: ${{ steps.vercel-storybook.outputs.preview-url }}

        steps:
            - name: Checkout
              uses: actions/checkout@v3

            - name: Install Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: 18

            - name: Install pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8
                  run_install: false

            - name: Get pnpm store directory
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

            - name: Setup pnpm cache
              uses: actions/cache@v3
              with:
                  path: ${{ env.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-

            - name: Install dependencies
              run: pnpm install

            # ================= Deploy Storybook =================
            - name: 📦 Build storybook
              run: pnpm run build:storybook

            - name: 🚀 Deploy to Vercel (storybook)
              uses: amondnet/vercel-action@v25
              id: vercel-storybook
              with:
                  vercel-token: ${{ secrets.VERCEL_TOKEN }}
                  vercel-org-id: ${{ secrets.ORG_ID }}
                  vercel-project-id: ${{ secrets.PROJECT_ID_STORYBOOK }}

    # build-docs:
    #     runs-on: ubuntu-latest
    #     needs: [release-nightly]

    #     outputs:
    #         preview-url: ${{ steps.vercel-docusaurus.outputs.preview-url }}

    #     steps:
    #         - name: Checkout
    #           uses: actions/checkout@v3

    #         - name: Install Node.js
    #           uses: actions/setup-node@v3
    #           with:
    #               node-version: 18

    #         - name: Install pnpm
    #           uses: pnpm/action-setup@v2
    #           with:
    #               version: 8
    #               run_install: false

    #         - name: Get pnpm store directory
    #           shell: bash
    #           run: |
    #               echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    #         - name: Setup pnpm cache
    #           uses: actions/cache@v3
    #           with:
    #               path: ${{ env.STORE_PATH }}
    #               key: ${{ runner.os }}-pnpm-${{ hashFiles('**/pnpm-lock.yaml') }}
    #               restore-keys: |
    #                   ${{ runner.os }}-pnpm-

    #         - name: Install dependencies
    #           run: pnpm install

    #         # ================= Deploy Docusaurus =================
    #         - name: 📦 Build documantation
    #           run: pnpm run build:site

    #         - name: Copy docs to workspace
    #           run: |
    #                 mkdir .workspace
    #                 cp -r ./apps/docs/build .workspace

    #         - name: 🚀 Deploy to Vercel (docusaurus)
    #           uses: amondnet/vercel-action@v25
    #           id: vercel-docusaurus
    #           with:
    #               vercel-token: ${{ secrets.VERCEL_TOKEN }}
    #               vercel-org-id: ${{ secrets.ORG_ID }}
    #               vercel-project-id: ${{ secrets.PROJECT_ID_DOCUSAURUS }}

    settlement:
        if: github.repository == 'dream-num/univer'
        runs-on: ubuntu-latest
        outputs:
            stars: ${{ steps.repo-status.outputs.stars }}
            forks: ${{ steps.repo-status.outputs.forks }}
            issues: ${{ steps.repo-status.outputs.issues }}

        env:
            TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
            TURBO_TEAM: ${{ vars.TURBO_TEAM }}

        steps:
            - name: ✨ Fetch repo status
              id: repo-status
              run: |
                  status=$(curl -s https://api.github.com/repos/${{ github.repository }})
                  stars=$(echo $status | jq .stargazers_count)
                  forks=$(echo $status  | jq .forks_count)
                  issues=$(echo $status  | jq .open_issues_count)

                  echo "release_type=$stars" >> $GITHUB_OUTPUT
                  echo "release_type=$forks" >> $GITHUB_OUTPUT
                  echo "release_type=$issues" >> $GITHUB_OUTPUT

    notify:
        needs: [release-nightly, build-demo, build-storybook, settlement]
        runs-on: ubuntu-latest
        if: ${{ always() }}

        steps:
            # ================= Notify Discord =================

            - name: 👾 Daily settlement
              uses: sarisia/actions-status-discord@v1
              with:
                    webhook: ${{ secrets.DISCORD_WEBHOOK }}?thread_id=${{ secrets.DISCORD_CI_NIGHTLY_RELEASE }}
                    status: ${{ job.status }}
                    description: |
                        🚀 Daily settlement

                        - 🌟 Stars: ${{ needs.settlement.outputs.stars }}
                        - 🍴 Forks: ${{ needs.settlement.outputs.forks }}
                        - 🤖 Issues: ${{ needs.settlement.outputs.issues }}
                    nofail: false
                    nodetail: true
                    nocontext: true
                    noprefix: true
                    color: 0x0984e3
                    username: Daily Settlement

            - name: 👾 Discord Notification
              uses: sarisia/actions-status-discord@v1
              if: ${{ success() }}
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}?thread_id=${{ secrets.DISCORD_CI_NIGHTLY_RELEASE }}
                  status: ${{ job.status }}
                  description: |
                      🌝 Nightly release: Successful

                      🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉
                      Release version: ${{ needs.release-nightly.outputs.version }}

                      **[View Deployment]**
                      - [📑 Doc](${{ needs.build-demo.outputs.preview-url }}/docs/)
                      - [📊 Sheet](${{ needs.build-demo.outputs.preview-url }}/sheets/)
                      - [📽️ Slide](${{ needs.build-demo.outputs.preview-url }}/slides/)

                      **[View Docs]**
                      - [📚 Storybook](${{ needs.build-storybook.outputs.preview-url }}/)
                      🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉 🎉

                      Have a good dream! 🌙
                  nofail: false
                  nodetail: false
                  nocontext: false
                  noprefix: true
                  color: 0x00b894
                  username: Nightly Release

            - name: 👾 Discord Notification
              uses: sarisia/actions-status-discord@v1
              if: ${{ failure() }}
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}?thread_id=${{ secrets.DISCORD_CI_NIGHTLY_RELEASE }}
                  status: ${{ job.status }}
                  description: |
                      🌚 Nightly release: Unsuccessful 💩

                      👿 👿 👿 👿 👿 👿 👿 👿 👿
                      Failed version: ${{ needs.release-nightly.outputs.version }}
                      👿 👿 👿 👿 👿 👿 👿 👿 👿

                      Don't worry, tomorrow will be better! 🌞
                  nofail: false
                  nodetail: false
                  nocontext: false
                  noprefix: true
                  color: 0xd63031
                  username: Nightly Release
